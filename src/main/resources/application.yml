server:
  port: 8080
  # Connection timeout and thread configuration
  netty:
    connection-timeout: 20s
    idle-timeout: 60s
  # Graceful shutdown
  shutdown: graceful

spring:
  application:
    name: tracking-number-generator
  
  # Lifecycle management
  lifecycle:
    timeout-per-shutdown-phase: 30s
  
  # WebFlux configuration
  webflux:
    # Maximum memory for form data
    max-in-memory-size: 1MB
    # Base path for all endpoints (optional)
    # base-path: /tracking-service
  
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
      timeout: 2000ms
      # Connection pool configuration
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
          time-between-eviction-runs: 30s
        # Cluster configuration (if using Redis Cluster)
        cluster:
          refresh:
            adaptive: true
            period: 30s
        # Shutdown timeout
        shutdown-timeout: 100ms
      # Redis connection timeout
      connect-timeout: 2000ms
      # Client configuration
      client-type: lettuce

# Custom application properties
tracking-number:
  max-retries: ${TRACKING_NUMBER_MAX_RETRIES:10}
  ttl-seconds: ${TRACKING_NUMBER_TTL_SECONDS:86400}
  # Additional configuration for business logic
  generation:
    length: 10
    max-length: 16
    min-length: 1
    pattern: "^[A-Z0-9]{1,16}$"

# Logging configuration
logging:
  level:
    com.trackingnumber: ${LOG_LEVEL_APP:INFO}
    org.springframework.data.redis: ${LOG_LEVEL_REDIS:WARN}
    reactor.netty: ${LOG_LEVEL_NETTY:WARN}
    io.lettuce: ${LOG_LEVEL_LETTUCE:WARN}
    # Spring Boot auto-configuration logging
    org.springframework.boot.autoconfigure: WARN
    # Transaction logging
    org.springframework.transaction: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  # Log file configuration (optional)
  file:
    name: ${LOG_FILE:logs/tracking-number-generator.log}
    max-size: 10MB
    max-history: 30
    total-size-cap: 1GB

# Management and monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,configprops
      base-path: /actuator
      # CORS configuration for actuator endpoints
      cors:
        allowed-origins: "*"
        allowed-methods: GET,POST
  endpoint:
    health:
      show-details: always
      show-components: always
      # Custom health indicators
      cache:
        time-to-live: 10s
    metrics:
      enabled: true
    prometheus:
      enabled: true
    # Enable shutdown endpoint (use with caution)
    shutdown:
      enabled: false
  
  # Health checks
  health:
    # Redis health check
    redis:
      enabled: true
    # Disk space health check
    diskspace:
      enabled: true
      threshold: 10MB
    # Circuit breaker health
    circuitbreakers:
      enabled: true
  
  # Metrics configuration
  metrics:
    export:
      prometheus:
        enabled: true
    # Custom metrics
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99
    tags:
      application: ${spring.application.name}
      environment: ${ENVIRONMENT:local}
  
  # Tracing configuration
  tracing:
    sampling:
      probability: ${TRACING_SAMPLING_PROBABILITY:1.0}
    baggage:
      remote-fields: user-id,customer-id
      correlation:
        fields: user-id,customer-id
  
  # Zipkin configuration
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_URL:http://localhost:9411/api/v2/spans}
      timeout: 1s
      # Compression
      compression:
        enabled: true

# Reactor Netty configuration
reactor:
  netty:
    pool:
      # Connection pool settings
      max-connections: 500
      max-idle-time: 30s
      max-life-time: 60s
      pending-acquire-timeout: 45s
      acquire-timeout: 45s

# Jackson configuration for JSON serialization
spring.jackson:
  default-property-inclusion: non_null
  serialization:
    write-dates-as-timestamps: false
    indent-output: false
  deserialization:
    fail-on-unknown-properties: false
    accept-single-value-as-array: true

# Profile-specific configurations
---
spring:
  config:
    activate:
      on-profile: local
logging:
  level:
    com.trackingnumber: DEBUG
    org.springframework.data.redis: DEBUG

---
spring:
  config:
    activate:
      on-profile: docker
  data:
    redis:
      host: redis
      port: 6379

---
spring:
  config:
    activate:
      on-profile: prod
server:
  shutdown: graceful
logging:
  level:
    com.trackingnumber: INFO
    org.springframework.data.redis: WARN
management:
  tracing:
    sampling:
      probability: 0.1
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus
